#include <iostream>
#include <vector>
using namespace std;

int knapsack(int n, int k, vector<int>& v, vector<int>& w) {
    vector<vector<int> > dp(n + 1, vector<int>(k + 1, 0));

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= k; ++j) {
            if (w[i - 1] <= j) {
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w[i - 1]] + v[i - 1]);
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }

    return dp[n][k];
}

int main() {
    int n, k;
    cin >> n >> k;

    vector<int> v(n), w(n);
    for (int i = 0; i < n; ++i) {
        cin >> v[i] >> w[i];
    }

    int ans = knapsack(n, k, v, w);
    cout << ans << endl;

    return 0;
}
