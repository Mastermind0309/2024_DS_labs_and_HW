#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int knapsack(int N, int K, vector<pair <int,int> >& items) {
    vector<vector < int > > dp(N + 1, vector<int>(K + 1, 0));

    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= K; ++j) {
            if (items[i - 1].second <= j) {
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - items[i - 1].second] + items[i - 1].first);
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }

    return dp[N][K];
}

int main() {
    int N, K;
    cin >> N >> K;

    vector<pair <int, int > > items(N);
    for (int i = 0; i < N; ++i) {
        cin >> items[i].first >> items[i].second;
    }

    cout << knapsack(N, K, items) << endl;

    return 0;
}
