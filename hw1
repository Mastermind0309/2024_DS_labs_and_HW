#include<iostream>
#include<string>
using namespace std;
char map[200][200]={'\0'}; // no runtime error
int R=0, L=0, N=0; // initialize col, row, actions 
const int row_bound=1, col_bound=1; // start from (1,1)
// this problem is stack invader from 2022, change my mind 


class Stack{
    private:
    int top, size;
    
    
    
    public:
    char* stack;
    
   Stack(int s = 100) : size(s), top(-1), stack(new char[size]) {} // initializer


    void doublesize()
    {
        size=size*2;
        char* newstack = new char[size];
        for(int i=0; i<=top; i++)
        {
            newstack[i]= stack[i];
        }
        //delete stack;
        stack= newstack;
    }
    
    ~Stack() {
        delete[] stack;
    } // destructor
    


    bool isempty()
    {
        return (top==-1);
    }

    bool isfull()
    {
        return (top==size-1);
    }

    void push( char item)
    {
        while(isfull())
        {
            doublesize();
        }
        //top++;
        stack[++top]= item;
    }

     

    char pop()
    {
        if(isempty())
        {
            return '\0';
        }
        top--;
        return stack[top+1];
    }
    char gettop()
    {
        return(isempty())? '\0': stack[top];
    }
    void displaystack()
    {
        if(!isempty())
        {
            for (int i=0; i<=top; i++)
            {
                cout<< stack[i]<<" ";
            }
            cout<<endl;
            return; // this return is all i need to go from PE to AC
        }
        cout<<endl;
        return;
    }

};

class Queue{
    private:
    int size;
    int front;
    int rear;
    //void doublesize();
   


    public:
    char* queue;
    
    Queue(int s=100): size(s), front(-1), rear(-1), queue(new char[size]) {}

    void doublesize()
    {
        size*=2;
        char* newqueue= new char[size];
        for (int i=front+1; i<= rear; i++) // beacause front starts from -1
        {
            newqueue[i]= queue[i]; // old queue->new queue
        }
         //delete queue// delete old queue
        queue= newqueue;
    }
    
    ~Queue()
    {
        delete[] queue;
    }
    

    bool isempty()
    {
        return (rear== front);
    }

    bool isfull()
    {
        return (rear==size-1);
    }

    void enqueue(char item)
    {
        if(isfull())
        {
            doublesize();
        }
        queue[rear+1]=item;
        rear++;

    }
    char dequeue()
    {
        if(isempty())
        {
            return '\0';
        }
        front++;
        return queue[front];
    }

    char getfront()
    {
        return (isempty())? '\0': queue[front+1];
    }
    
    char getrear()
    {
        return (isempty())? '\0':queue[rear];
    }
    

    void displayqueue()
    {
         for(int i = front + 1; i <= rear; i++) {
            cout << queue[i] << " ";
        }
        cout << endl;
    }
    


};
Stack bag; // for items
Queue inventory; // for props

void dig( int col)
{
    char item;
    int cur_row=-1; // initialize current row
    int row_max=-1; // for finding the column with at least 1 item
    if(R<0||L<0) return;
    for (int i=L; i>=row_bound; i--)
    {
        if(!(map[i][col]=='\0'||map[i][col]=='_'))
        {
            item= map[i][col];
            cur_row=i;
            break; // founded
        }
    }
    
    if (item== 'D')
    {
        bag.push('D');
        map[cur_row][col]='_';
        
    }
    else if(item =='G')
    {
        bag.push('G');
        map[cur_row][col]='_';

    }
    else if (item=='B') // handle bomb
    {
         map[cur_row][col] = '_'; // itself
        for(int i = -1; i <= 1; i++) { // iterate over adjacent rows
            for(int j = -1; j <= 1; j++) { // iterate over adjacent columns
                if(map[cur_row + i][col + j] != '\0') {
                    map[cur_row + i][col + j] = '_';
                }
            }
        }
        // total 8, but not the one above bomb, because no way that could happen
    }
    else if(item=='F')
    {
        inventory.enqueue('F');
        map[cur_row][col]='_';
    }
    else if(item=='M')
    {
        inventory.enqueue('M');
        map[cur_row][col]='_';
    }
    else if(item=='C')
    {
        map[cur_row][col]='_';
        if(bag.isempty()) return;
        for(int i=L; i>=row_bound; i--)
        {
            for(int j=col_bound; j<=R; j++)
            {
                if(map[i][j]!='_') 
                {
                    row_max=i; // doesn't need to use another loop to find max(a,b), since one item at the top level is enough 
                    break;
                }
            }
            if(row_max!=-1) break; //  find row_max
        }

        
        for (int i=row_max+1; i<=row_max+3; i++)
        {
            for (int j= col_bound; j<=R; j++)
            {
                map[i][j]='_';
            }
        }
       
        L=row_max+3;
        char fill_items = bag.gettop();
        for(int i= row_max+1; i<=row_max+3; i++)
        {
            
            map[i][col]=fill_items;
            map[i][col-1]= fill_items;
            map[i][col-2]= fill_items;
            map[i][col+1]= fill_items;
            map[i][col+2]=fill_items;
        }

    }
    else
    {
        map[cur_row][col] = '_';
        while(bag.gettop()=='G') bag.pop();
    }
}



int main()
{
    cin>>R>>L>>N; // column, row, action
    for(int i=L; i>= row_bound; i--)
    {
        for (int j=col_bound; j<=R; j++)
        {
            cin>>map[i][j];
        }
    }
    while(N--)
    {
        
        string action;
        char props;
        cin>> action;
        if(action=="DIG")
        {
            int col=-1;
            cin>>col;
            dig(col+col_bound);
        }
        else if(action=="USE")
        {
            props= inventory.dequeue();
            int mine_level=-1;
            if(props =='F') //top most level contains at least 1 item
            {
                for(int j= L; j>=row_bound; j--)
                {
                    for(int k= col_bound; k<=R; k++)
                    {
                        if(map[j][k]!='_' && map[j][k]!='\0')
                        {
                            mine_level= j;
                            break;
                        }
                    }
                    if(mine_level!=-1) break; // must keep
                }

                if(mine_level==-1)
                {
                 cout<<"MINE LEVEL:"<<1<<endl;
                    for(int p=col_bound; p<=R; p++)
                    {
                        cout<<'_'<<" ";
                    }   
                        cout<<endl;
                        break;
                } else{
                cout<<"MINE LEVEL:"<<mine_level<<endl;
                for(int j=col_bound; j<=R; j++) cout<<map[mine_level][j]<<" ";
                cout<<endl;
                
                }
            }
            else if(props=='M')
            {
                for(int j=col_bound; j<=R; j++) dig(j);
               
            }

        }
       
        
    }
    /*
        cout<<"now_bag: ";
        bag.displaystack();
        cout<<"now_inventory: ";
        inventory.displayqueue();
        cout<<"now_map: ";
        for(int i=L; i>=row_bound; i--)
        {
            for(int j=col_bound; j<col_bound+R; j++)
            {
                cout<<map[i][j]<<" ";
            }
            cout<<endl;
        }
        cout<<"====================================="<<endl;

    */
    cout<<"FINAL BAG:"<<endl;
    bag.displaystack();
    //cout<<endl;


    cout<<"FINAL MAP:"<<endl;
    int total=0; //  indicating how much have we got 
    for (int i=L; i>=row_bound; i--)
    {
        int now=0; // indicating how much we have in the current row
        for(int j= col_bound; j<=R; j++)
        {
            if(map[i][j]!='_' && map[i][j]!='\0')
            {
                total+=1;
                now+=1;
                break;
            }
        }
        if(now!=0||total!=0)
        {
            //if(total==0) cout<<endl;
            for(int k= col_bound; k<=R; k++)
            {
                cout<<map[i][k]<<" ";
            }
            cout<<endl;
        }
        
    }   
   
    return 0;
}
